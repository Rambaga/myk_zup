Функция ПолучитьСотрудникаПоФизЛицуНаДату(Период, ФизическоеЛицо)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
		//|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	ТаблицаСотрудников.Свернуть("ФизическоеЛицо, Сотрудник, Подразделение");
	НайденныйСотрудник = ТаблицаСотрудников.Найти(ФизическоеЛицо,"ФизическоеЛицо");
	Сотрудник = Новый Структура();
	Если НайденныйСотрудник = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Для физлица "+ФизическоеЛицо + " не найден сотрудник на период " + Период);
	Иначе
		Сотрудник.Вставить("Сотрудник", НайденныйСотрудник.Сотрудник);
		Сотрудник.Вставить("Подразделение", НайденныйСотрудник.Подразделение);
	КонецЕсли;
	
	
	Возврат Сотрудник;

КонецФункции // ПолучитьСотрудникаПоФизЛицуНаДату()

&НаСервере
Процедура ВыполнитьВыравниваниеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыССотрудниками.Период КАК Период,
		|	ВзаиморасчетыССотрудниками.Регистратор КАК Регистратор,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК Приход,
		|	0 КАК Расход
		|ПОМЕСТИТЬ ВтПриходРасход
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВзаиморасчетыССотрудниками.Активность = ИСТИНА
		|	И ВзаиморасчетыССотрудниками.Период >= &НачалоПериода
		|	И ВзаиморасчетыССотрудниками.Период < &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыССотрудниками.Период,
		|	ВзаиморасчетыССотрудниками.Регистратор,
		|	0,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыССотрудниками.Активность = ИСТИНА
		|	И ВзаиморасчетыССотрудниками.Период >= &НачалоПериода
		|	И ВзаиморасчетыССотрудниками.Период < &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПриходРасход.Период КАК Период,
		|	ВтПриходРасход.Регистратор КАК Регистратор,
		|	СУММА(ВтПриходРасход.Приход) КАК Приход,
		|	СУММА(ВтПриходРасход.Расход) КАК Расход
		|ИЗ
		|	ВтПриходРасход КАК ВтПриходРасход
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПриходРасход.Период,
		|	ВтПриходРасход.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаборЗаписейВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборЗаписейЗарплатаКВыплате = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейВзаиморасчеты.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписейВзаиморасчеты.Прочитать();
		НаборЗаписейЗарплатаКВыплате.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписейЗарплатаКВыплате.Прочитать();
		Для Индекс = 1 - НаборЗаписейВзаиморасчеты.Количество() По 0 Цикл
			Запись = НаборЗаписейВзаиморасчеты[- Индекс];
			Если Запись.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				НаборЗаписейВзаиморасчеты.Удалить(- Индекс);
			КонецЕсли;
		КонецЦикла;
		ТаблицаПрихода = НаборЗаписейВзаиморасчеты.Выгрузить();
		
		ТаблицаПрихода.Свернуть("Период, Регистратор, ВидДвижения, Организация, ФизическоеЛицо, СтатьяФинансирования, СтатьяРасходов, Сотрудник, Подразделение, ВидВзаиморасчетов, ГруппаНачисленияУдержанияВыплаты, Сторно", "СуммаВзаиморасчетов");
		
		Для каждого Запись Из ТаблицаПрихода Цикл
		
			СтруктураСотрудник = ПолучитьСотрудникаПоФизЛицуНаДату(Запись.Период, Запись.ФизическоеЛицо);
			Запись.Сотрудник = СтруктураСотрудник.Сотрудник;
			Запись.Подразделение = СтруктураСотрудник.Подразделение;
		КонецЦикла;
		
		НаборЗаписейВзаиморасчеты.Загрузить(ТаблицаПрихода);
		
		Для Индекс = 1 - НаборЗаписейВзаиморасчеты.Количество() По 0 Цикл
			Запись = НаборЗаписейВзаиморасчеты[- Индекс];
			Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ДвижениеРасхода = НаборЗаписейВзаиморасчеты.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Запись);
				ДвижениеРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
				ДвижениеРасхода.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты;
				ДвижениеРасхода.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейЗарплатаКВыплате.Очистить();
		Для Индекс = 1 - НаборЗаписейВзаиморасчеты.Количество() По 0 Цикл
			Запись = НаборЗаписейВзаиморасчеты[- Индекс];
			Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ДвижениеПрихода = НаборЗаписейЗарплатаКВыплате.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеПрихода, Запись);
				ДвижениеПрихода.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеПрихода.ПериодВзаиморасчетов = Запись.Период;
				ДвижениеПрихода.СуммаКВыплате = Запись.СуммаВзаиморасчетов;
				
				ДвижениеРасхода = НаборЗаписейЗарплатаКВыплате.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Запись);
				ДвижениеРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
				ДвижениеРасхода.ПериодВзаиморасчетов = Запись.Период;
				ДвижениеРасхода.СуммаКВыплате = Запись.СуммаВзаиморасчетов;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейВзаиморасчеты.Записать(Истина);
		НаборЗаписейЗарплатаКВыплате.Записать(Истина);
	КонецЦикла;
	ОбщегоНазначения.СообщитьПользователю("Обработка выполнена");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыравнивание(Команда)
	ВыполнитьВыравниваниеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НачалоПериода = Дата(2010,1,1);
	КонецПериода = Дата(2020,1,1);
КонецПроцедуры

&НаСервере
Процедура ВыравниваниеНачальныхОстатковНаСервере()
	/////////////////////////////////////////////////
	// Для того,чтобы корректно перенести, нужно создать документ с одинаковым месяцем с документом задолженности
	// и добавить одну запись регистра накопления, чтобы он отображался в регистре
	/////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыССотрудниками.Период КАК Период,
		|	ВзаиморасчетыССотрудниками.Регистратор КАК Регистратор,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК Приход,
		|	0 КАК Расход
		|ПОМЕСТИТЬ ВтПриходРасход
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВзаиморасчетыССотрудниками.Активность = ИСТИНА
		|	И ВзаиморасчетыССотрудниками.Период < &НачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыССотрудниками.Период,
		|	ВзаиморасчетыССотрудниками.Регистратор,
		|	0,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыССотрудниками.Активность = ИСТИНА
		|	И ВзаиморасчетыССотрудниками.Период < &НачалоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПриходРасход.Период КАК Период,
		|	ВтПриходРасход.Регистратор КАК Регистратор,
		|	СУММА(ВтПриходРасход.Приход) КАК Приход,
		|	СУММА(ВтПриходРасход.Расход) КАК Расход
		|ИЗ
		|	ВтПриходРасход КАК ВтПриходРасход
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПриходРасход.Период,
		|	ВтПриходРасход.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.НачальнаяЗадолженностьПоЗарплате") Тогда
			НаборЗаписейЗадолжености = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
			НаборЗаписейЗадолжености.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.ПереносДанных") Тогда
			НаборЗаписейПереносВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
			НаборЗаписейПереносВзаиморасчеты.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
			НаборЗаписейПереносЗарплата = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
			НаборЗаписейПереносЗарплата.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		КонецЕсли;
	КонецЦикла;
	
	
	НаборЗаписейЗадолжености.Прочитать();
	НаборЗаписейПереносВзаиморасчеты.Прочитать();
	Регистратор = НаборЗаписейПереносВзаиморасчеты[0].Регистратор;
	
	ТаблицаЗадолжености = НаборЗаписейЗадолжености.Выгрузить();
	НаборЗаписейПереносВзаиморасчеты.Очистить();
	НаборЗаписейПереносЗарплата.Очистить();
	
	Для каждого Запись Из ТаблицаЗадолжености Цикл
		
		Движение = НаборЗаписейПереносВзаиморасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
		Движение.Регистратор = Регистратор;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты;
		Движение.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		
		ДвижениеРасхода = НаборЗаписейПереносЗарплата.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Запись);
		Движение.Регистратор = Регистратор;
		ДвижениеРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
		ДвижениеРасхода.ПериодВзаиморасчетов = Запись.Период;
		ДвижениеРасхода.СуммаКВыплате = Запись.СуммаВзаиморасчетов;
		
	КонецЦикла;
	
	//НаборЗаписейПереносВзаиморасчеты.Записать(Истина);
	//НаборЗаписейПереносЗарплата.Записать(Истина);
	
	ОбщегоНазначения.СообщитьПользователю("Обработка выполнена");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеНачальныхОстатков(Команда)
	ВыравниваниеНачальныхОстатковНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыравниваниеПоРегиструНачисленияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период >= &НачалоПериода
		|	И НачисленияУдержанияПоСотрудникам.Период < &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаборЗаписейНачисления = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
	НаборЗаписейВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборЗаписейЗарплатаКВыплате = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписейНачисления.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписейНачисления.Прочитать();
		
		ТаблицаНачислений = НаборЗаписейНачисления.Выгрузить();
		
		ТаблицаНачислений.Свернуть("Организация, ФизическоеЛицо, Сотрудник, Подразделение, НачислениеУдержание", "Сумма");
		
		//НаборЗаписейВзаиморасчеты.Записать(Истина);
		//НаборЗаписейЗарплатаКВыплате.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоРегиструНачисления(Команда)
	ВыравниваниеПоРегиструНачисленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода >= Дата(2020, 1, 1) Тогда
		Сообщить("Дата начала больше 2020");
		НачалоПериода = Дата(2010, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если КонецПериода > Дата(2020, 1, 1) Тогда
		Сообщить("Дата конца больше 2020");
		КонецПериода = Дата(2020, 1, 1);
	КонецЕсли;
	
КонецПроцедуры
